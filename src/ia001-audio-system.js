// Syst√®me d'audio pour IA001
// G√®re les sons de marche, combat et mort

import { entity } from './entity.js';
import { spatial_audio_system } from './spatial-audio-system.js';

export const ia001_audio_system = (() => {

  class IA001AudioSystem extends entity.Component {
    constructor(params) {
      super();
      this._params = params || {};
      this._spatialAudio = null;
      this._audioConfig = null;
      this._currentWalkSound = null;
      this._currentFightSound = null;
      this._isWalking = false;
      this._isFighting = false;
      this._isDying = false;
      this._lastHealth = 150; // IA001 health par d√©faut
      this._walkSoundInterval = null;
      
      // Ajouter des raccourcis clavier pour tester les sons
      this._SetupTestControls();
      
      this._Init();
    }

    async _Init() {
      try {
        // Cr√©er le syst√®me d'audio spatial
        this._spatialAudio = new spatial_audio_system.SpatialAudioSystem();
        
        // Attendre une interaction utilisateur pour d√©bloquer l'audio
        await this._WaitForUserInteraction();
        
        // Attendre que le contexte audio soit pr√™t
        if (this._spatialAudio._audioContext && this._spatialAudio._audioContext.state === 'suspended') {
          await this._spatialAudio._audioContext.resume();
          console.log('üîä Contexte audio repris');
        }
        
        // Charger la configuration audio
        await this._LoadAudioConfig();
        
        console.log('üîä Syst√®me audio IA001 initialis√© avec succ√®s');
      } catch (error) {
        console.error('‚ùå Erreur lors de l\'initialisation du syst√®me audio IA001:', error);
      }
    }

    async _WaitForUserInteraction() {
      return new Promise((resolve) => {
        const handleInteraction = () => {
          console.log('üëÜ Interaction utilisateur d√©tect√©e - Audio d√©bloqu√©');
          document.removeEventListener('click', handleInteraction);
          document.removeEventListener('keydown', handleInteraction);
          resolve();
        };
        
        // Si l'audio est d√©j√† autoris√©, pas besoin d'attendre
        if (this._spatialAudio._audioContext && this._spatialAudio._audioContext.state !== 'suspended') {
          resolve();
          return;
        }
        
        console.log('üîá En attente d\'une interaction utilisateur pour d√©bloquer l\'audio...');
        document.addEventListener('click', handleInteraction);
        document.addEventListener('keydown', handleInteraction);
      });
    }

    async _LoadAudioConfig() {
      try {
        const response = await fetch('./resources/ia001/audios/audio.json');
        this._audioConfig = await response.json();
        
        // Pr√©charger tous les sons IA001
        if (this._spatialAudio) {
          await this._PreloadSounds();
        }
        
        console.log('‚úÖ Configuration audio IA001 charg√©e:', this._audioConfig);
      } catch (error) {
        console.error('‚ùå Erreur lors du chargement de la config audio IA001:', error);
      }
    }

    async _PreloadSounds() {
      if (!this._audioConfig || !this._spatialAudio) return;
      
      try {
        // Charger le son de marche
        if (this._audioConfig.walk) {
          await this._spatialAudio.LoadAudio('ia001_walk', './resources/ia001/audios/walk.mp3');
        }
        
        // Charger le son de combat
        if (this._audioConfig.fight) {
          await this._spatialAudio.LoadAudio('ia001_fight', './resources/ia001/audios/fight.mp3');
        }
        
        // Charger le son de mort
        if (this._audioConfig.die) {
          await this._spatialAudio.LoadAudio('ia001_die', './resources/ia001/audios/die.mp3');
        }
        
        console.log('‚úÖ Tous les sons IA001 pr√©charg√©s');
      } catch (error) {
        console.error('‚ùå Erreur lors du pr√©chargement des sons IA001:', error);
      }
    }

    // D√©marrer le son de marche
    StartWalkSound() {
      if (!this._spatialAudio || this._isWalking || this._isDying) {
        return;
      }
      
      this._isWalking = true;
      this._PlayWalkSoundLoop();
    }

    // Arr√™ter le son de marche
    StopWalkSound() {
      this._isWalking = false;
      if (this._walkSoundInterval) {
        clearInterval(this._walkSoundInterval);
        this._walkSoundInterval = null;
      }
      if (this._currentWalkSound) {
        this._currentWalkSound.stop();
        this._currentWalkSound = null;
      }
    }

    // Jouer le son de marche en boucle
    _PlayWalkSoundLoop() {
      const position = this._GetEntityPosition();
      
      if (position) {
        this._spatialAudio.PlaySpatialSound(
          'ia001_walk', 
          position.x, 
          position.y, 
          position.z,
          { 
            volume: 1.0,
            loop: true
          }
        );
      }
    }

     _SetupTestControls() {
       document.addEventListener('keydown', (event) => {
         if (!this._spatialAudio || !this._audioConfig) return;
         
         switch(event.key) {
           case 'F': // Tester le son de combat
           case 'f':
             console.log('üéÆ Test manuel: Son de combat');
             if (!this._isFighting) {
               this.StartFightSound();
             } else {
               this.StopFightSound();
             }
             break;
             
           case 'D': // Tester le son de mort
           case 'd':
             console.log('üéÆ Test manuel: Son de mort');
             this.PlayDeathSound();
             break;
             
           case 'W': // Tester le son de marche
           case 'w':
             console.log('üéÆ Test manuel: Son de marche');
             if (!this._isWalking) {
               this.StartWalkSound();
             } else {
               this.StopWalkSound();
             }
             break;
             
           case 'S': // Arr√™ter tous les sons
           case 's':
             console.log('üéÆ Test manuel: Arr√™t de tous les sons');
             this._StopAllSounds();
             break;
         }
       });
       
       console.log('üéÆ Contr√¥les de test audio IA001 activ√©s:');
       console.log('  F = Combat on/off');
       console.log('  D = Son de mort');
       console.log('  W = Marche on/off');
       console.log('  S = Arr√™ter tous les sons');
    }

    // D√©marrer le son de combat
    StartFightSound() {
      if (!this._spatialAudio || this._isFighting || this._isDying) {
        return;
      }
      
      this._isFighting = true;
      
      const position = this._GetEntityPosition();
      
      if (position) {
        this._currentFightSound = this._spatialAudio.PlaySpatialSound(
          'ia001_fight', 
          position.x, 
          position.y, 
          position.z,
          { 
            volume: 1.0,
            loop: true
          }
        );
      }
    }

    // Arr√™ter le son de combat
    StopFightSound() {
      this._isFighting = false;
      if (this._currentFightSound) {
        this._currentFightSound.stop();
        this._currentFightSound = null;
        console.log('üîá Son de combat IA001 arr√™t√©');
      }
    }

    // Jouer le son de mort
    PlayDeathSound() {
      console.log('üíÄ PlayDeathSound appel√©:', {
        spatialAudio: !!this._spatialAudio,
        isDying: this._isDying
      });
      
      if (!this._spatialAudio || this._isDying) {
        console.log('üö´ PlayDeathSound bloqu√©');
        return;
      }
      
      this._isDying = true;
      this._StopAllSounds(); // Arr√™ter tous les autres sons
      
      const position = this._GetEntityPosition();
      console.log('üìç Position IA001 pour mort:', position);
      
      if (position) {
        console.log('üîä Tentative de lecture du son de mort');
        const deathSound = this._spatialAudio.PlaySpatialSound(
          'ia001_die', 
          position.x, 
          position.y, 
          position.z,
          { 
            volume: 1.0,
            loop: false
          }
        );
        console.log('üíÄ Son de mort IA001 jou√©:', !!deathSound);
      } else {
        console.log('‚ùå Impossible de jouer le son de mort - pas de position');
      }
    }

    // V√©rifier la sant√© et jouer le son de mort si n√©cessaire
    CheckHealthForDeathSound(currentHealth) {
      // Jouer le son de mort quand la sant√© passe sous 20 points
      if (currentHealth < 20 && this._lastHealth >= 20 && !this._isDying) {
        console.log('‚ö†Ô∏è IA001 sant√© critique, son de mort d√©clench√©');
        this.PlayDeathSound();
      }
      this._lastHealth = currentHealth;
    }

    // Arr√™ter tous les sons
    _StopAllSounds() {
      this.StopWalkSound();
      this.StopFightSound();
    }

    // Obtenir la position de l'entit√©
    _GetEntityPosition() {
      const npcController = this._parent.GetComponent('NPCController');
      if (npcController && npcController._target) {
        return npcController._target.position;
      }
      return null;
    }

    // Mettre √† jour l'√©tat audio selon l'activit√©
    UpdateAudioState(isWalking, isFighting, currentHealth) {
      if (!this._spatialAudio || !this._audioConfig) {
        return;
      }

      // SONS D√âSACTIV√âS - Tous les sons de l'IA001 sont maintenant silencieux
      // Son de marche d√©sactiv√©
      // if (!this._isWalking) {
      //   this.StartWalkSound();
      // }

      // Son de combat d√©sactiv√©
      // if (isFighting && !this._isFighting) {
      //   this.StartFightSound();
      // } else if (!isFighting && this._isFighting) {
      //   this.StopFightSound();
      // }

      // Son de mort d√©sactiv√©
      // if (currentHealth < 20 && !this._isDying && this._lastHealth >= 20) {
      //   this.PlayDeathSound();
      //   this._isDying = true;
      // }

      // Arr√™ter tous les sons existants
      this._StopAllSounds();

      this._isFighting = isFighting;
      this._lastHealth = currentHealth;
    }

    // Nettoyage
    Destroy() {
      this._StopAllSounds();
      super.Destroy();
    }
  }

  return {
    IA001AudioSystem: IA001AudioSystem,
  };

})();